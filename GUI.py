# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'movies.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from DBConnection import *
from main import *
from GUI import *


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(605, 482)
        Dialog.setAutoFillBackground(False)
        self.addMovie = QtWidgets.QPushButton(Dialog)
        self.addMovie.setGeometry(QtCore.QRect(480, 420, 93, 28))
        self.addMovie.setObjectName("addMovie")
        self.yearInput = QtWidgets.QSpinBox(Dialog)
        self.yearInput.setGeometry(QtCore.QRect(138, 420, 82, 31))
        self.yearInput.setObjectName("yearInput")
        self.titleText = QtWidgets.QTextEdit(Dialog)
        self.titleText.setGeometry(QtCore.QRect(230, 420, 104, 31))
        self.titleText.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.titleText.setToolTip("")
        self.titleText.setToolTipDuration(-1)
        self.titleText.setWhatsThis("")
        self.titleText.setObjectName("titleText")
        self.directorText = QtWidgets.QTextEdit(Dialog)
        self.directorText.setGeometry(QtCore.QRect(350, 420, 104, 31))
        self.directorText.setObjectName("directorText")
        self.listName = QtWidgets.QComboBox(Dialog)
        self.listName.setGeometry(QtCore.QRect(20, 420, 101, 31))
        self.listName.setObjectName("listName")
        self.toListCombo = QtWidgets.QComboBox(Dialog)
        self.toListCombo.setGeometry(QtCore.QRect(400, 10, 93, 28))
        self.toListCombo.setObjectName("toListCombo")
        self.displayButton = QtWidgets.QPushButton(Dialog)
        self.displayButton.setGeometry(QtCore.QRect(400, 50, 93, 28))
        self.displayButton.setObjectName("toSeenList")
        self.scrollArea = QtWidgets.QScrollArea(Dialog)
        self.scrollArea.setGeometry(QtCore.QRect(20, 10, 361, 231))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 359, 229))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.tableWidget = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 361, 231))
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(225, 225, 225))
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(225, 225, 225))
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(225, 225, 225))
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.orderByCombo = QtWidgets.QComboBox(Dialog)
        self.orderByCombo.setGeometry(QtCore.QRect(510, 10, 91, 31))
        self.orderByCombo.setObjectName("orderByCombo")
        self.whichListCombo = QtWidgets.QComboBox(Dialog)
        self.whichListCombo.setGeometry(QtCore.QRect(450, 140, 91, 31))
        self.whichListCombo.setObjectName("whichListCombo")
        self.searchText = QtWidgets.QTextEdit(Dialog)
        self.searchText.setGeometry(QtCore.QRect(400, 90, 201, 31))
        self.searchText.setObjectName("searchText")
        self.searchButton = QtWidgets.QPushButton(Dialog)
        self.searchButton.setGeometry(QtCore.QRect(450, 180, 93, 28))
        self.searchButton.setObjectName("searchButton")
        self.orderByButton = QtWidgets.QPushButton(Dialog)
        self.orderByButton.setGeometry(QtCore.QRect(510, 50, 93, 28))
        self.orderByButton.setObjectName("orderByButton")

        self.watchedButton = QtWidgets.QPushButton(Dialog)
        self.watchedButton.setGeometry(QtCore.QRect(40, 330, 93, 28))
        self.watchedButton.setObjectName("watchedButton")
        self.unwatchedButton = QtWidgets.QPushButton(Dialog)
        self.unwatchedButton.setGeometry(QtCore.QRect(40, 370, 93, 28))
        self.unwatchedButton.setObjectName("unwatchedButton")

        self.movieTitle = QtWidgets.QTextEdit(Dialog)
        self.movieTitle.setGeometry(QtCore.QRect(40, 260, 280, 41))
        self.movieTitle.setObjectName("movieTitle")

        self.watchDel = QtWidgets.QPushButton(Dialog)
        self.watchDel.setGeometry(QtCore.QRect(180, 330, 171, 28))
        self.watchDel.setObjectName("watchDel")
        self.seenDel = QtWidgets.QPushButton(Dialog)
        self.seenDel.setGeometry(QtCore.QRect(180, 370, 171, 28))
        self.seenDel.setObjectName("seenDel")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(370, 230, 241, 171))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        ################################################################################################################
        self.listName.addItems(["Watch List", "Seen List"])
        self.whichListCombo.addItems(["Watch List", "Seen List"])
        self.toListCombo.addItems(["Watch List", "Seen List"])
        self.orderByCombo.addItems(["Title", "Year", "Director"])

        self.titleText.setText("Title")
        self.directorText.setText("Director Name")

        self.yearInput.setRange(1888, 3000)

        self.displayButton.clicked.connect(self.getDisplay)
        self.orderByButton.clicked.connect(self.orderBy)
        self.searchButton.clicked.connect(self.searchBy)

        self.watchedButton.clicked.connect(self.moveToSeenList)
        self.unwatchedButton.clicked.connect(self.moveToWatchList)
        self.watchDel.clicked.connect(self.deleteFromWatchList)
        self.seenDel.clicked.connect(self.deleteFromSeenList)

        self.addMovie.clicked.connect(self.getList)
        ################################################################################################################

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.addMovie.setText(_translate("Dialog", "Add Movie"))
        self.displayButton.setText(_translate("Dialog", "Display Button"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Title"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Release Year"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "Director "))
        self.searchButton.setText(_translate("Dialog", "Search"))
        self.orderByButton.setText(_translate("Dialog", "Order By"))
        self.watchedButton.setText(_translate("Dialog", "Watched"))
        self.unwatchedButton.setText(_translate("Dialog", "Unwatched"))
        self.watchDel.setText(_translate("Dialog", "Remove from Watch List"))
        self.seenDel.setText(_translate("Dialog", "Remove from Seen List"))
        self.label.setText(_translate("Dialog", "'Film is like a battleground. \n"
            " There\'s love, hate,\n"
            " action, violence, death...\n"
            " in one word: emotion.' \n"
            " - Samuel Fuller"))


#######MY METHODS####################################################################################################


    ###GETTERS##########################################################################################################
    def getDisplay(self):
        if self.toListCombo.currentText() == "Watch List":
            self.displayWatchList()
        else:
            self.displaySeenList()

    def getToListCombo(self):
        return self.toListCombo.currentText()

    def getList(self):
        if self.listName.currentText() == "Watch List":
            self.addToWatchList(int(self.getYear()), str(self.getTitle()), str(self.getDirector()))
        else:
            self.addToSeenList(int(self.getYear()), str(self.getTitle()), str(self.getDirector()))
    def getYear(self):
        return self.yearInput.value()
    def getTitle(self):
        return self.titleText.toPlainText()
    def getDirector(self):
        return self.directorText.toPlainText()


    def getOrderByCombo(self):
        return self.orderByCombo.currentText()
    def getSearchText(self):
        return self.searchText.toPlainText()
    def getListCombo(self):
        return self.whichListCombo.currentText()

    def getMovieTitle(self):
        return self.movieTitle.toPlainText()

    ###FULL LIST QUERIES################################################################################################

    def displayWatchList(self):
        orderby = self.getOrderByCombo()
        connection = dbConnect()
        if orderby == "Year":
            query = "select * from watchlist order by ReleaseYear"
        elif orderby == "Title":
            query = "select * from watchlist order by Title"
        elif orderby == "Director":
            query ="select * from watchlist order by Director"
        cursor = connection.cursor()
        result = None
        try:
            cursor.execute(query)
            result = cursor.fetchall()
            self.tableWidget.setRowCount(0);
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            return
        except Error as err:
            print(f"Error: '{err}'")

        connection.close()


    def displaySeenList(self):
        orderby = self.getOrderByCombo()
        connection = dbConnect()
        if orderby == "Year":
            query = "select * from seenlist order by ReleaseYear"
        elif orderby == "Title":
            query = "select * from seenlist order by Title"
        elif orderby == "Director":
            query = "select * from seenlist order by Director"
        cursor = connection.cursor()
        result = None
        try:
            cursor.execute(query)
            result = cursor.fetchall()
            self.tableWidget.setRowCount(0);
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

        except Error as err:
            print(f"Error: '{err}'")
        connection.close()
    ###ADD QUERY########################################################################################################

    def addToWatchList(self, year, title, director):
        connection = dbConnect()
        myYear = year
        myTitle = title
        myDirector = director
        query = 'insert into watchlist (Title, ReleaseYear, Director) values (%s,%s,%s)'
        values = (myTitle, myYear, myDirector)
        cursor = connection.cursor()
        try:
            cursor.execute(query, values)
            connection.commit()
        except Error as err:
            print(f"Error: '{err}'")
        self.displayWatchList()
        connection.close()

    def addToSeenList(self, year, title, director):
        connection = dbConnect()
        myYear = year
        myTitle = title
        myDirector = director
        query = 'insert into seenlist (Title, ReleaseYear, Director) values (%s,%s,%s)'
        values = (myTitle, myYear, myDirector)
        cursor = connection.cursor()
        try:
            cursor.execute(query, values)
            connection.commit()
        except Error as err:
            print(f"Error: '{err}'")
        self.displaySeenList()
        connection.close()

    ###DELETE QUERY#####################################################################################################

    def deleteFromWatchList(self):
        myTitle = str(self.getMovieTitle())
        connection = dbConnect()
        query = "delete from watchlist where Title='"+myTitle+"' "
        cursor = connection.cursor()
        try:
            cursor.execute(query)
            connection.commit()
            self.displayWatchList()
            return
        except Error as err:
            print(f"Error: '{err}'")
            self.displayWatchList()
        connection.close()


    def deleteFromSeenList(self):
        myTitle = str(self.getMovieTitle())
        connection = dbConnect()
        query = "delete from seenlist where Title='" + myTitle + "' "
        cursor = connection.cursor()
        try:
            cursor.execute(query)
            connection.commit()
            self.displaySeenList()
            return
        except Error as err:
            print(f"Error: '{err}'")
            self.displaySeenList()
        connection.close()
    ###SWAP QUERY#######################################################################################################

    def moveToSeenList(self):
        myTitle = str(self.getMovieTitle())
        connection = dbConnect()
        query = "select * from watchlist where Title='" + myTitle + "' "
        cursor = connection.cursor()
        result = None
        try:
            cursor.execute(query)
            result = cursor.fetchall()
            connection.close()


        except Error as err:
            print(f"Error: '{err}'")
            connection.close()

        self.deleteFromWatchList()
        year = result[0][1]
        print(year)
        title = result[0][0]
        director = result[0][2]
        self.addToSeenList(year, title, director)
        self.displaySeenList()

    def moveToWatchList(self):
        myTitle = str(self.getMovieTitle())
        connection = dbConnect()
        query = "select * from seenlist where Title='" + myTitle + "' "
        print("hi")
        cursor = connection.cursor()
        result = None
        try:
            cursor.execute(query)
            result = cursor.fetchall()
            connection.close()
        except Error as err:
            print(f"Error: '{err}'")
            connection.close()

        self.deleteFromSeenList()
        year = result[0][1]
        title = result[0][0]
        director = result[0][2]
        self.addToWatchList(year, title, director)
        self.displayWatchList()
    ###ORDER LISTS######################################################################################################

    def orderBy(self):
        if self.getToListCombo() == "Watch List":
            self.displayWatchList()
        else:
            self.displaySeenList()

    ###SEARCH LISTS#####################################################################################################

    def searchWatchList(self):
        searchby = self.getOrderByCombo()
        search = self.getSearchText()
        connection = dbConnect()
        if searchby == "Year":
            query = "select * from watchlist where ReleaseYear like '%"+search+"%' order by ReleaseYear"
        elif searchby == "Title":
            query = "select * from watchlist where Title like '%"+search+"%' order by Title"
        elif searchby == "Director":
            query = "select * from watchlist where Director like '%"+search+"%' order by Director"
        cursor = connection.cursor()
        result = None
        try:
            cursor.execute(query)
            result = cursor.fetchall()
            self.tableWidget.setRowCount(0);
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            return
        except Error as err:
            print(f"Error: '{err}'")

        connection.close()

    def searchSeenList(self):
        searchby = self.getOrderByCombo()
        search = self.getSearchText()
        connection = dbConnect()
        if searchby == "Year":
            query = "select * from seenlist where ReleaseYear like '%" + search + "%' order by ReleaseYear"
        elif searchby == "Title":
            query = "select * from seenlist where Title like '%" + search + "%' order by Title"
        elif searchby == "Director":
            query = "select * from seenlist where Director like '%" + search + "%' order by Director"
        cursor = connection.cursor()
        result = None
        try:
            cursor.execute(query)
            result = cursor.fetchall()
            self.tableWidget.setRowCount(0);
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            return
        except Error as err:
            print(f"Error: '{err}'")

    def searchBy(self):
        if self.getListCombo() == "Watch List":
            self.searchWatchList()
        else:
            self.searchSeenList()

    ####################################################################################################################






